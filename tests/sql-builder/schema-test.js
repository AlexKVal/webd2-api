'use strict'
const test = require('tape')

const Schema = require('../../lib/sql-builder/schema')

test('Schema: allows "new Schema()" and just "Schema()"', (t) => {
  t.ok(((Schema({})) instanceof Schema))
  t.ok(((new Schema({})) instanceof Schema))
  t.end()
})

test('Schema.columns contains only columns` descriptors', (t) => {
  const schema = new Schema({
    name: 'string',
    hide: 'boolean',
    group: {
      belongsTo: { name: 'user-group' }
    }
  })

  t.equal(Object.keys(schema.columns).length, 2)
  t.equal(schema.columns.name, 'string')
  t.equal(schema.columns.hide, 'boolean')
  t.end()
})

test('Schema.dataFieldsNames contains array of columns names', (t) => {
  const schema = new Schema({
    name: 'string',
    hide: 'boolean',
    group: {
      belongsTo: { name: 'user-group' }
    }
  })

  t.equal(schema.dataFieldsNames.length, 2)
  t.equal(schema.dataFieldsNames[0], 'name')
  t.equal(schema.dataFieldsNames[1], 'hide')
  t.end()
})

test('Schema.relations is object which contains descriptions of relations', (t) => {
  const schema = new Schema({
    name: 'string',
    group: {
      belongsTo: { name: 'user-group' }
    },
    posts: {
      hasMany: { name: 'post' }
    }
  })

  t.equal(Object.keys(schema.relations).length, 2)
  t.equal(schema.relations.group.belongsTo.name, 'user-group')
  t.equal(schema.relations.posts.hasMany.name, 'post')
  t.end()
})

test('Schema: belongsTo autogenerates "fkAs" if undefined', (t) => {
  const schema = new Schema({
    group: {
      belongsTo: { name: 'user-group' },
      fkField: 'GrpID'
    },
    rights: {
      belongsTo: { name: 'rights' },
      fkField: 'rights',
      fkAs: 'whatever'
    }
  })

  t.equal(schema.relations.group.fkAs, 'userGroupId', 'autogenerated')
  t.equal(schema.relations.rights.fkAs, 'whatever', 'user-defined')
  t.end()
})

test('Schema: "attributes" contains all dataSet keys', (t) => {
  const schema = new Schema({
    name: 'string',
    boolFlag: 'boolean',
    someNumber: 'integer',

    group: {
      belongsTo: { name: 'user-group' },
      fkField: 'GrpID'
    },
    rights: {
      belongsTo: { name: 'rights' },
      fkField: 'rights',
      fkAs: 'whatever'
    }
  })

  t.equal(schema.attributes.length, 7)
  t.deepEqual(schema.attributes, [
    'name', 'boolFlag',
    'someNumber', 'userGroupId',
    'group', 'whatever', 'rights'
  ])
  t.end()
})

test('Schema: throws if "belongsTo" is not a model', (t) => {
  function fn1 () {
    Schema({
      group: {
        belongsTo: 'model-name', // not a model
        fkField: 'GrpID'
      }
    })
  }

  t.throws(fn1, /belongsTo should be a model/)
  t.end()
})

test('Schema#getBelongsToRelations() returns array of "belongsTo" relations', (t) => {
  const userGroupModel = { name: 'user-group' }
  const rightsModel = { name: 'rights' }

  const schema = new Schema({
    group: {
      belongsTo: userGroupModel,
      fkField: 'GrpID'
    },
    rights: {
      belongsTo: rightsModel
    }
  })

  const relations = schema.getBelongsToRelations()
  t.equal(relations.length, 2)
  t.deepEqual(relations, [
    {
      name: 'group',
      relationModel: userGroupModel,
      fkName: 'userGroupId'
    },
    {
      name: 'rights',
      relationModel: rightsModel,
      fkName: 'rightsId'
    }
  ])
  t.end()
})
